/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c GeoClue2Client -p geoclue2client_p.h:geoclue2client.cpp org.freedesktop.GeoClue2.xml org.freedesktop.GeoClue2.Client
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GEOCLUE2CLIENT_P_H_1400937813
#define GEOCLUE2CLIENT_P_H_1400937813

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.GeoClue2.Client
 */
class GeoClue2Client: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.GeoClue2.Client"; }

public:
    GeoClue2Client(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~GeoClue2Client();

    Q_PROPERTY(bool Active READ active)
    inline bool active() const
    { return qvariant_cast< bool >(property("Active")); }

    Q_PROPERTY(QString DesktopId READ desktopId WRITE setDesktopId)
    inline QString desktopId() const
    { return qvariant_cast< QString >(property("DesktopId")); }
    inline void setDesktopId(const QString &value)
    { setProperty("DesktopId", QVariant::fromValue(value)); }

    Q_PROPERTY(uint DistanceThreshold READ distanceThreshold WRITE setDistanceThreshold)
    inline uint distanceThreshold() const
    { return qvariant_cast< uint >(property("DistanceThreshold")); }
    inline void setDistanceThreshold(uint value)
    { setProperty("DistanceThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(QDBusObjectPath Location READ location)
    inline QDBusObjectPath location() const
    { return qvariant_cast< QDBusObjectPath >(property("Location")); }

    Q_PROPERTY(uint RequestedAccuracyLevel READ requestedAccuracyLevel WRITE setRequestedAccuracyLevel)
    inline uint requestedAccuracyLevel() const
    { return qvariant_cast< uint >(property("RequestedAccuracyLevel")); }
    inline void setRequestedAccuracyLevel(uint value)
    { setProperty("RequestedAccuracyLevel", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Start"), argumentList);
    }

    inline QDBusPendingReply<> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void LocationUpdated(const QDBusObjectPath &old, const QDBusObjectPath &new);
};

namespace org {
  namespace freedesktop {
    namespace GeoClue2 {
      typedef ::GeoClue2Client Client;
    }
  }
}
#endif
